// Generated by CoffeeScript 1.12.8

/*
 * GET
 * ~~~
 * We define a global object with pre-parsed data: the GET parameters of the
 * current URL.
 *
 * H + Hraw
 * ~   ~~~~
 * We define two global functions to ease the construction of HTML nodes.
 *
 * utils
 * ~~~~~
 * We define a global object with a variety of functions needed in many distinct
 * places.
 */

(function() {
  var INITIAL_TIMESTAMP, base, debug, i2s, item, j, len, pair, ref, ref1, ref2, s2i,
    slice = [].slice,
    hasProp = {}.hasOwnProperty;

  debug = function(s) {
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log(s);
    }
  };

  if ((base = String.prototype).trim == null) {
    base.trim = function() {
      return this.replace(/^\s+|\s+$/g, "");
    };
  }

  if (document.getElementsByClassName == null) {
    document.getElementsByClassName = function(className) {
      return document.querySelectorAll("." + className);
    };
  }

  (typeof exports !== "undefined" && exports !== null ? exports : this).GET = {};

  ref2 = ((ref = (ref1 = window.location) != null ? ref1.search : void 0) != null ? ref : "?").slice(1).split("&");
  for (j = 0, len = ref2.length; j < len; j++) {
    item = ref2[j];
    pair = item.split("=");
    if (pair.length === 2) {
      GET[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
    }
  }

  (typeof exports !== "undefined" && exports !== null ? exports : this).H = function() {
    var attributes, child, children, k, kind, l, len1, res, v;
    kind = arguments[0], attributes = arguments[1], children = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    if (attributes == null) {
      return document.createTextNode(kind);
    } else {
      res = document.createElement(kind);
      for (k in attributes) {
        if (!hasProp.call(attributes, k)) continue;
        v = attributes[k];
        if (k === "type") {
          res.setAttribute(k, v);
        } else {
          res[k] = v;
        }
      }
      for (l = 0, len1 = children.length; l < len1; l++) {
        child = children[l];
        if (typeof child === "string" || child instanceof String) {
          res.appendChild(document.createTextNode(child));
        } else {
          res.appendChild(child);
        }
      }
      return res;
    }
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).Hraw = function(htmlText) {
    var aux, error, obj;
    try {
      return (function() {
        var l, len1, ref3, results;
        ref3 = ((new DOMParser).parseFromString(htmlText, "text/html")).body.childNodes;
        results = [];
        for (l = 0, len1 = ref3.length; l < len1; l++) {
          obj = ref3[l];
          results.push(obj);
        }
        return results;
      })();
    } catch (error1) {
      error = error1;
      aux = H("div", {});
      aux.innerHTML = htmlText;
      return (function() {
        var l, len1, ref3, results;
        ref3 = aux.childNodes;
        results = [];
        for (l = 0, len1 = ref3.length; l < len1; l++) {
          obj = ref3[l];
          results.push(obj);
        }
        return results;
      })();
    }
  };

  INITIAL_TIMESTAMP = new Date;

  i2s = function(i, d) {
    var res;
    if (d == null) {
      d = 2;
    }
    res = "" + i;
    while (res.length < d) {
      res = "0" + res;
    }
    return res;
  };

  s2i = function(s) {
    return parseInt(s, 10);
  };

  (typeof exports !== "undefined" && exports !== null ? exports : this).utils = {
    getCurrentURL: function(params, anchor) {
      var href, k, ref3, ref4, ref5, v;
      if (params == null) {
        params = {};
      }
      if (anchor == null) {
        anchor = true;
      }
      href = (ref3 = (ref4 = window.location) != null ? ref4.href : void 0) != null ? ref3 : "";
      params = this.deepCopy(params);
      for (k in GET) {
        if (!hasProp.call(GET, k)) continue;
        v = GET[k];
        if (!(k in params)) {
          params[k] = v;
        }
      }
      anchor = anchor === true ? (ref5 = (href.split("#"))[1]) != null ? ref5 : "" : anchor === false ? "" : anchor != null ? anchor : "";
      if (anchor !== "") {
        anchor = "#" + anchor;
      }
      return (href.split(/[?]|#/))[0] + (this.params2url(params)) + anchor;
    },
    requestJSON: function(where, params, callback) {
      var timestamp, xhr;
      if (callback == null) {
        callback = null;
      }
      timestamp = new Date;
      where += this.params2url(params);
      xhr = new XMLHttpRequest;
      xhr.open("get", where);
      xhr.onreadystatechange = (function(_this) {
        return function() {
          var answer, error;
          if (xhr.readyState === 4 && xhr.status === 200) {
            answer = xhr.responseText;
            debug((_this.millis2str((new Date) - INITIAL_TIMESTAMP, true)) + ": '" + where + "' answered " + answer.length + " bytes in " + (((new Date) - timestamp) / 1000) + "s");
            if (callback != null) {
              try {
                answer = JSON.parse(answer);
              } catch (error1) {
                error = error1;
                alert("ERROR: " + answer);
                return;
              }
              return callback(answer);
            }
          }
        };
      })(this);
      xhr.send(null);
    },
    requestJSONpost: function(where, params, post, callback) {
      var timestamp, xhr;
      if (callback == null) {
        callback = null;
      }
      timestamp = new Date;
      where += this.params2url(params);
      post = (this.params2url(post)).slice(1);
      xhr = new XMLHttpRequest;
      xhr.open("post", where);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhr.onreadystatechange = (function(_this) {
        return function() {
          var answer, error;
          if (xhr.readyState === 4 && xhr.status === 200) {
            answer = xhr.responseText;
            debug((_this.millis2str((new Date) - INITIAL_TIMESTAMP, true)) + ": '" + where + "' (+" + post.length + " bytes of POST) answered " + answer.length + " bytes in " + (((new Date) - timestamp) / 1000) + "s");
            if (callback != null) {
              try {
                answer = JSON.parse(answer);
              } catch (error1) {
                error = error1;
                alert("ERROR: " + answer);
                return;
              }
              return callback(answer);
            }
          }
        };
      })(this);
      xhr.send(post);
    },
    params2url: function(params) {
      var k, res, v;
      res = "";
      for (k in params) {
        if (!hasProp.call(params, k)) continue;
        v = params[k];
        if (!(v !== void 0)) {
          continue;
        }
        res += res.length === 0 ? "?" : "&";
        res += (encodeURIComponent(k)) + "=" + (encodeURIComponent('' + v));
      }
      return res;
    },
    getNode: function(n) {
      if (typeof n === "string" || n instanceof String) {
        return document.getElementById(n);
      } else {
        return n;
      }
    },
    removeChildren: function(n) {
      n = this.getNode(n);
      while (n.firstChild != null) {
        n.removeChild(n.firstChild);
      }
      return n;
    },
    replaceBy: function(a, b) {
      a = this.getNode(a);
      a.parentNode.insertBefore(b, a);
      a.parentNode.removeChild(a);
      return a;
    },
    objectEmpty: function(obj) {
      var k;
      for (k in obj) {
        if (!hasProp.call(obj, k)) continue;
        return false;
      }
      return true;
    },
    deepCopy: function(x) {
      var k, res, v, y;
      switch (typeof x) {
        case "object":
          if (x instanceof Array) {
            return (function() {
              var l, len1, results;
              results = [];
              for (l = 0, len1 = x.length; l < len1; l++) {
                y = x[l];
                results.push(this.deepCopy(y));
              }
              return results;
            }).call(this);
          } else {
            res = {};
            for (k in x) {
              if (!hasProp.call(x, k)) continue;
              v = x[k];
              res[k] = this.deepCopy(v);
            }
            return res;
          }
          break;
        case "boolean":
        case "number":
        case "string":
          return x;
      }
    },
    splitLines: function(s) {
      var ref3;
      return (ref3 = s.match(/[^\r\n]+/g)) != null ? ref3 : [];
    },
    splitWords: function(s) {
      var ref3;
      return (ref3 = s.match(/\S+/g)) != null ? ref3 : [];
    },
    millis2str: function(millis, showMillis) {
      var d, h, m, s;
      if (showMillis == null) {
        showMillis = false;
      }
      millis = Math.round(millis);
      s = Math.floor(millis / 1000);
      m = Math.floor(s / 60);
      h = Math.floor(m / 60);
      d = Math.floor(h / 24);
      millis -= s * 1000;
      s -= m * 60;
      m -= h * 60;
      h -= d * 24;
      h = (d > 0 && h < 10 ? "0" : "") + h;
      d = d > 0 ? d + "-" : "";
      m = (m < 10 ? "0" : "") + m;
      s = (s < 10 ? "0" : "") + s;
      millis = (millis < 100 ? "0" : "") + (millis < 10 ? "0" : "") + millis;
      return d + h + ":" + m + ":" + s + (showMillis ? "." + millis : "");
    },
    date: function(utcstring) {
      var parts;
      parts = utcstring.match(/[^-:TZ ]+/g);
      return new Date(Date.UTC(s2i(parts[0]), (s2i(parts[1])) - 1, s2i(parts[2]), s2i(parts[3]), s2i(parts[4]), s2i(parts[5])));
    },
    localdate: function(localstring) {
      var parts;
      parts = localstring.match(/[^-:T ]+/g);
      return new Date(s2i(parts[0]), (s2i(parts[1])) - 1, s2i(parts[2]), s2i(parts[3]), s2i(parts[4]), s2i(parts[5]));
    },
    date2localdate: function(utcstring) {
      var date;
      if (utcstring instanceof Date) {
        date = utcstring;
      } else {
        date = this.date(utcstring);
      }
      return (i2s(date.getFullYear(), 4)) + "-" + (i2s(date.getMonth() + 1)) + "-" + (i2s(date.getDate())) + " " + (i2s(date.getHours())) + ":" + (i2s(date.getMinutes())) + ":" + (i2s(date.getSeconds()));
    },
    localdate2date: function(localstring) {
      var date;
      if (localstring instanceof Date) {
        date = localstring;
      } else {
        date = this.localdate(localstring);
      }
      return (i2s(date.getUTCFullYear(), 4)) + "-" + (i2s(date.getUTCMonth() + 1)) + "-" + (i2s(date.getUTCDate())) + " " + (i2s(date.getUTCHours())) + ":" + (i2s(date.getUTCMinutes())) + ":" + (i2s(date.getUTCSeconds()));
    },
    clockSpan: function(spanid, seconds, utcDateOf0, countDown) {
      var interval, timestamp;
      if (countDown == null) {
        countDown = true;
      }
      timestamp = new Date;
      countDown = countDown ? -1 : 1;
      interval = setInterval(((function(_this) {
        return function() {
          var current;
          current = seconds + countDown * ((new Date) - timestamp) / 1000;
          (_this.removeChildren(spanid)).appendChild(H(_this.millis2str(Math.max(0, current * 1000))));
          if (current < 0) {
            return clearInterval(interval);
          }
        };
      })(this)), 250);
      return H("span", {
        id: spanid,
        title: this.date2localdate(utcDateOf0)
      }, H(this.millis2str(Math.max(0, seconds * 1000))));
    }
  };

}).call(this);
