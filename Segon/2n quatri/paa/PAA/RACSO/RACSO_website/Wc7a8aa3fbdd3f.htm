<!DOCTYPE html>
<html>
	<head>
		<title>Exercise 6 | RACSO</title>
		<meta charset="utf-8">
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta http-equiv="Cache-Control" content="no-cache">
		<link rel="stylesheet" type="text/css" href="style.css">
		<link rel="icon" href="favicon.ico" sizes="any">
		<link rel="icon" href="favicon.png" type="image/png">
		
	<link rel="stylesheet" type="text/css" href="style-racso.css">
	<link rel="stylesheet" type="text/css" href="delatexify/build/delatexify.css">
	
		<script type="text/javascript" src="editor/codemirror-5.65.1/lib/codemirror.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/addon/hint/show-hint.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/addon/display/fullscreen.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/addon/selection/active-line.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/mode/lua/lua.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/mode/stex/stex.js"></script>
<script type="text/javascript" src="editor/latexhint.js"></script>
<script type="text/javascript" src="editor/antlr.js"></script>
<script type="text/javascript" src="editor/cfg.js"></script>
<script type="text/javascript" src="editor/dfa.js"></script>
<script type="text/javascript" src="editor/operations.js"></script>
<script type="text/javascript" src="editor/pda.js"></script>
<script type="text/javascript" src="editor/redk.js"></script>
<script type="text/javascript" src="editor/rednp.js"></script>
<script type="text/javascript" src="editor/redwp.js"></script>
<script type="text/javascript" src="editor/wordreachability.js"></script>
<script type="text/javascript" src="editor/cfgderivations.js"></script>
<script type="text/javascript" src="editor/finitestatemachine.js"></script>
<script type="text/javascript" src="editor/main.js"></script>
<link rel="stylesheet" type="text/css" href="editor/codemirror-5.65.1/lib/codemirror.css">
<link rel="stylesheet" type="text/css" href="editor/codemirror-5.65.1/addon/hint/show-hint.css">
<link rel="stylesheet" type="text/css" href="editor/codemirror-5.65.1/addon/display/fullscreen.css">
<link rel="stylesheet" type="text/css" href="editor/finitestatemachine.css">
<link rel="stylesheet" type="text/css" href="editor/extra.css">
<link rel="stylesheet" type="text/css" href="editor/dark.css">
<link rel="stylesheet" type="text/css" href="editor/light.css">
		<script type="text/javascript" src="common.js"></script>
	

	</head>
	<body>
		<table class="banner">
			<tr>
				<td>
					<span><a class="logo link" href="index/default.htm">RACSO</a><a class="link" href="Wc4de018ff0ea.htm">DFA</a><span class="separator"></span><a class="link" href="Wc8ed1eda3435a.htm">CFG</a><span class="separator"></span>Operations:
		  <a class="link" href="Wc3b38f6bb568.htm">Reg</a>,
		  <a class="link" href="Wc222ecb919537.htm">CF</a><span class="separator"></span><a class="link" href="Wc29a1289699c4.htm">PDA</a><span class="separator"></span>Reductions:
		  <a class="link" href="Wcbe7b42ff9194.htm">K</a>,
		  <a class="link" href="Wc7f793506b20.htm">WP</a>,
		  <a class="link" href="Wc8493d9ed5ae.htm">CFG</a>,
		  <a class="link" href="Wc97fc850c238.htm">NP</a>,
		  <a class="link" href="Wc300bea47a1c7.htm">SAT</a><span class="separator"></span>ANTLR:
		  <a class="link" href="Wc26bc632b26e0.htm">lexical</a>,
		  <a class="link" href="Wcee0466f22aa1.htm">syntactic</a><span class="thick-separator"></span><a class="link" href="exam-list/default.htm">Exams</a>

					</span>
				</td>
				<td class="user">
					<a class="link" href="login/default.htm">log in</a>, <a class="link" href="register/default.htm">register</a>, <a class="link" href="guest/default.htm">become guest</a>
					
				</td>
			</tr>
		</table>
		
			<div class="banner cookie">
				This site uses cookies only for the purpose of identifying user sessions.
				This is required to properly register actions.
				<!-- By proceeding, you consent to this. -->
			</div>
		
		
	<div class="exercise">
		<h2 class="exercise-intro">
			
				Exercise
				<a href="Wc4aba52f086b2.htm" title="Previous exercise" style="text-decoration:none"><sub>â€¹</sub></a>6:
			
		</h2>
		<div class="exercise-title">Grammar for Pascal statements</div>
		
			<div class="exercise-description">The set of tokens of the language is {<span class="dltxfy-verbspan">IDENT</span>, <span class="dltxfy-verbspan">expr</span>,
<span class="dltxfy-verbspan">:</span>, <span class="dltxfy-verbspan">:=</span>, <span class="dltxfy-verbspan">,</span>, <span class="dltxfy-verbspan">;</span>, <span class="dltxfy-verbspan">(</span>, <span class="dltxfy-verbspan">)</span>, <span class="dltxfy-verbspan">goto</span>,
<span class="dltxfy-verbspan">begin</span>, <span class="dltxfy-verbspan">end</span>, <span class="dltxfy-verbspan">if</span>, <span class="dltxfy-verbspan">then</span>, <span class="dltxfy-verbspan">else</span>, <span class="dltxfy-verbspan">case</span>,
<span class="dltxfy-verbspan">of</span>, <span class="dltxfy-verbspan">repeat</span>, <span class="dltxfy-verbspan">until</span>, <span class="dltxfy-verbspan">while</span>, <span class="dltxfy-verbspan">do</span>, <span class="dltxfy-verbspan">for</span>,
<span class="dltxfy-verbspan">to</span>, <span class="dltxfy-verbspan">downto</span>, <span class="dltxfy-verbspan">with</span>}. The token <span class="dltxfy-verbspan">IDENT</span> recognizes
valid identifiers, i.e., a non-empty sequence of lowercase alphanumeric
characters and underscore, not starting by a digit. We do not consider
uppercase letters, since Pascal is case-insensitive. Token <span class="dltxfy-verbspan">expr</span>
represents an arbitrary expression, and thus, we de not need to parse
expressions, as we already dispose of this &#x2018;token&#x2019;. This token includes
<em>variable access</em>, which are expressions such as &#x201C;<span class="dltxfy-verbspan">index</span>&#x201D;,
&#x201C;<span class="dltxfy-verbspan">v[6]</span>&#x201D;, and &#x201C;<span class="dltxfy-verbspan">node.child</span>&#x201D;.

<div class="dltxfy-paragraph"><br/></div>There are two types of statements: simple statements, and structured
statements. Any statement may be prefixed by a label (an identifier), as in
&#x201C;<span class="dltxfy-verbspan">L: ...</span>&#x201D;. In that case, the token <span class="dltxfy-verbspan">:</span> must appear as root of the
AST.

<div class="dltxfy-paragraph"><br/></div>Simple statements are statements that do not contain other statements. There are 4 kinds:
<ul>
<li> Empty statements. In the AST, there should be a special node named
<span class="dltxfy-verbspan">nop</span> (<em>no operation</em>).
</li><li> Assignment statements, such as &#x201C;<span class="dltxfy-verbspan">i := j + k</span>&#x201D;. In the AST, the
token <span class="dltxfy-verbspan">:=</span> shoud appear as root, with the variable access (which is
recognized by the token <span class="dltxfy-verbspan">expr</span>) and the assigned value as children.
</li><li> Procedure statements, such as &#x201C;<span class="dltxfy-verbspan">paint(color)</span>&#x201D;,
&#x201C;<span class="dltxfy-verbspan">showInfo</span>&#x201D;, or &#x201C;<span class="dltxfy-verbspan">max(x, y, z)</span>&#x201D;. The list of parameters is
optional. When it is present, in the AST the token <span class="dltxfy-verbspan">(</span> should appear as
root, with the procedure identifier and the list of parameters (which are
expressions), grouped under a special node named <span class="dltxfy-verbspan">param_list</span>, as
children.
</li><li> Go-to statements, such as &#x201C;<span class="dltxfy-verbspan">goto L1</span>&#x201D;. In the AST, the token
<span class="dltxfy-verbspan">goto</span> should appear as root.
</li></ul>
There are 4 kinds of structured statements:
<ul>
<li> Compound statements, such as &#x201C;<span class="dltxfy-verbspan">begin x := y; ; x := z end</span>&#x201D;, where
the second statement is an empty statement. They consist of a list of
statements separated by semicolons between the <span class="dltxfy-verbspan">begin</span> and <span class="dltxfy-verbspan">end</span>
tags. In the AST, the tokens <span class="dltxfy-verbspan">begin</span> should appear as root, with the
statements as children.
</li><li> Conditional statements: there are 2 types:
<ul>
<li> If statements, such as &#x201C;<span class="dltxfy-verbspan">if i &lt; size then x := y</span>&#x201D; or
&#x201C;<span class="dltxfy-verbspan">if a or b then x := y else x := z</span>&#x201D;. The else part is optional. In the
AST, the token <span class="dltxfy-verbspan">if</span> should appear as root, with the condition (an
expression), the <span class="dltxfy-verbspan">then</span> statement and the <span class="dltxfy-verbspan">else</span> statements (if
present) as children.
</li><li> Case statements, such as
<pre>
case operation of
   add:    x := x + y;
   sub:    x := x - y;
   div:    x := x / y
end
</pre>
In the AST, the token <span class="dltxfy-verbspan">case</span> should appear as root, with the <em>case
index</em> expression (&#x201C;<span class="dltxfy-verbspan">operation</span>&#x201D; in the example) and the list of cases,
grouped under a special node named <span class="dltxfy-verbspan">case_list</span>, as children. Cases are
separated by semicolons, with an optional semicolon after the last one, and
there must be at least one. Each one can have one or more <em>case
constants</em>, which are expressions, as in &#x201C;<span class="dltxfy-verbspan">A, B, C: ...</span>&#x201D;. In the AST,
the token <span class="dltxfy-verbspan">:</span> should appear as root of each case, with the list of
constants, grouped under a special node named <span class="dltxfy-verbspan">constant_list</span>, and the
corresponding statement as children.
</li></ul>
</li><li> Repetitive statements. There are tree types:
<ul>
<li> While statements, such as
<pre>
while b &lt;&gt; 0 do
   begin t := b;
   b := a mod b;
   a := t
end
</pre>
In the AST, the token <span class="dltxfy-verbspan">while</span> should appear as root, with the condition
and the statement to be executed while it is true as children.
</li><li> Repeat statements, such as
<pre>
repeat
   t := b;
   b := a mod b;
   a := t
until b = 0
</pre>
Note that between the <span class="dltxfy-verbspan">repeat</span> and <span class="dltxfy-verbspan">until</span> keywords there can be a
more than one statement separated by semicolons. In other words, the
<span class="dltxfy-verbspan">begin</span> and <span class="dltxfy-verbspan">end</span> tags are not necessary. In the AST, the token
<span class="dltxfy-verbspan">repeat</span> should appear as root, with the list of statements, grouped under
a special node named <span class="dltxfy-verbspan">statement_sequence</span>, and the condition as children.
</li><li> For statements, such as
<pre>
begin
   for i := 10 to 30 do
      cont := cont + i;
   for j := 12*8 downto i/2 do
      cont := cont - j
end
</pre>
which is a compound statement with two for statements. In the AST, the token
<span class="dltxfy-verbspan">for</span> should appear as root, with the <em>control variable</em> (an
identifier, such as <span class="dltxfy-verbspan">i</span> in the example), the initial value (<span class="dltxfy-verbspan">10</span>),
the loop direction keyword (<span class="dltxfy-verbspan">to</span> or <span class="dltxfy-verbspan">downto</span>), the final value
(<span class="dltxfy-verbspan">30</span>) and statement to be executed at each iteration as children.
</li></ul>
</li><li> With statements, such as
<pre>
with date do
   if month = 12 then
      begin month := 1; year := year + 1
      end
   else month := month + 1
</pre>
It serves to access the elements of a record without having to specify the
<em>record variable&#x2019;s</em> name each time. Thus, the previous code snippet is
equivalent to:
<pre>
if date.month = 12 then
   begin date.month := 1; date.year := date.year + 1
   end
else date.month := date.month + 1
</pre>
The record variable (<span class="dltxfy-verbspan">date</span> in the example) is an expression. There can be
more than one record variable, as in <span class="dltxfy-verbspan">with x, y, z do ...</span>. In the AST,
the <span class="dltxfy-verbspan">with</span> token should appear as root, with the list of record variables,
grouped under a special node named <span class="dltxfy-verbspan">record_variable_list</span>, and the
statement to be executed with these variables as children.
</li></ul></div>
			<div class="exercise-details">
				<span class="exercise-detail">Authors:</span> Nil Mamano
				
					/
					<span class="exercise-detail">Documentation:</span> <a href="documentation/antlrsyn.pdf"></a>
				
				
			</div>
			<table>
				<tr>
					<td class="topCell">
						<form method="post" action="Wcbe9296538b37.htm">
							
							<textarea id="codemirror-area" name="submission" wrap="soft" rows="20" cols="80">
// Write your syntactic and lexical descriptions here...</textarea>
							
								To be able to submit you need to either <a class="link" href="login/default.htm">log in</a>, <a class="link" href="register/default.htm">register</a>, or <a class="link" href="guest/default.htm">become a guest</a>.
							
							
							
						</form>
					</td>
					<td class="topCell separatedCell">
						<div class="submission-details">
							
						</div>
					</td>
				</tr>
			</table>
			<script type="text/javascript">
				(function() {
					racsoEditor('codemirror-area', {
						mode: "antlrsyn",
					});
				}());
				
			</script>
			<script type="text/javascript" src="utc-date-rewriter.js"></script>
		
	</div>

		
	</body>
</html>