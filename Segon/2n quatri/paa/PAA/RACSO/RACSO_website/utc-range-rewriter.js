// Generated by CoffeeScript 1.10.0

/*
 * First, this code looks for all nodes with "utc-range" class, and replaces
 * each of them by either a countdown to the start (when not started yet) or to
 * the end (when not ended yet) or by a countup (when ended already). Each of
 * the nodes should have data-* attributes with the startdate/enddate in UTC and
 * also the seconds2start/seconds2end/duration in seconds.
 * Second, it looks for all nodes with "utc-range-percent" class, and replaces
 * each of them by the % of remaining time. Each of the nodes should have data-*
 * attributes with the seconds2end/duration in seconds.
 */

(function() {
  var duration, enddate, n, nn, rangeid, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, seconds2end, seconds2start, startdate;

  rangeid = 0;

  while (true) {
    n = (ref = document.getElementsByClassName("utc-range")) != null ? ref[0] : void 0;
    if (n == null) {
      break;
    }
    ++rangeid;
    startdate = (ref1 = n.dataset) != null ? ref1.startdate : void 0;
    enddate = (ref2 = n.dataset) != null ? ref2.enddate : void 0;
    seconds2start = parseInt((ref3 = (ref4 = n.dataset) != null ? ref4.seconds2start : void 0) != null ? ref3 : "0", 10);
    seconds2end = parseInt((ref5 = (ref6 = n.dataset) != null ? ref6.seconds2end : void 0) != null ? ref5 : "0", 10);
    duration = parseInt((ref7 = (ref8 = n.dataset) != null ? ref8.duration : void 0) != null ? ref7 : "0", 10);
    if ((startdate == null) || (enddate == null)) {
      nn = n;
      nn.className = "";
    } else if (seconds2end < 0) {
      nn = H("span", {}, H("finished "), utils.clockSpan("rangeid-" + rangeid, Math.abs(seconds2end), enddate, false), H(" ago"));
    } else if (seconds2start < 0) {
      nn = H("span", {}, utils.clockSpan("rangeid-" + rangeid, seconds2end, enddate), H(" to finish, out of " + (utils.millis2str(duration * 1000))));
    } else {
      nn = H("span", {}, utils.clockSpan("rangeid-" + rangeid, seconds2start, startdate), H(" to start, it will last " + (utils.millis2str(duration * 1000))));
    }
    if (n !== nn) {
      utils.replaceBy(n, nn);
    }
  }

  while (true) {
    n = (ref9 = document.getElementsByClassName("utc-range-percent")) != null ? ref9[0] : void 0;
    if (n == null) {
      break;
    }
    ++rangeid;
    seconds2end = parseInt((ref10 = (ref11 = n.dataset) != null ? ref11.seconds2end : void 0) != null ? ref10 : "0", 10);
    duration = parseInt((ref12 = (ref13 = n.dataset) != null ? ref13.duration : void 0) != null ? ref12 : "0", 10);
    if (seconds2end <= 0 || duration <= 0) {
      nn = H("0");
    } else if (seconds2end > duration) {
      nn = H("100");
    } else {
      nn = H("span", {
        id: "rangeid-" + rangeid
      }, H("" + (Math.round(seconds2end / duration * 100))));
      (function(rangeid, seconds2end, duration) {
        var interval, timestamp;
        timestamp = new Date;
        return interval = setInterval((function() {
          var current;
          current = Math.max(0, seconds2end - ((new Date) - timestamp) / 1000);
          (utils.removeChildren("rangeid-" + rangeid)).appendChild(H("" + (Math.round(current / duration * 100))));
          if (current <= 0) {
            return clearInterval(interval);
          }
        }), 60 * 1000);
      })(rangeid, seconds2end, duration);
    }
    utils.replaceBy(n, nn);
  }

}).call(this);
