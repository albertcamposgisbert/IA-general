<!DOCTYPE html>
<html>
	<head>
		<title>Exercise 4 | RACSO</title>
		<meta charset="utf-8">
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<meta http-equiv="Cache-Control" content="no-cache">
		<link rel="stylesheet" type="text/css" href="style.css">
		<link rel="icon" href="favicon.ico" sizes="any">
		<link rel="icon" href="favicon.png" type="image/png">
		
	<link rel="stylesheet" type="text/css" href="style-racso.css">
	<link rel="stylesheet" type="text/css" href="delatexify/build/delatexify.css">
	
		<script type="text/javascript" src="editor/codemirror-5.65.1/lib/codemirror.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/addon/hint/show-hint.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/addon/display/fullscreen.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/addon/selection/active-line.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/mode/lua/lua.js"></script>
<script type="text/javascript" src="editor/codemirror-5.65.1/mode/stex/stex.js"></script>
<script type="text/javascript" src="editor/latexhint.js"></script>
<script type="text/javascript" src="editor/antlr.js"></script>
<script type="text/javascript" src="editor/cfg.js"></script>
<script type="text/javascript" src="editor/dfa.js"></script>
<script type="text/javascript" src="editor/operations.js"></script>
<script type="text/javascript" src="editor/pda.js"></script>
<script type="text/javascript" src="editor/redk.js"></script>
<script type="text/javascript" src="editor/rednp.js"></script>
<script type="text/javascript" src="editor/redwp.js"></script>
<script type="text/javascript" src="editor/wordreachability.js"></script>
<script type="text/javascript" src="editor/cfgderivations.js"></script>
<script type="text/javascript" src="editor/finitestatemachine.js"></script>
<script type="text/javascript" src="editor/main.js"></script>
<link rel="stylesheet" type="text/css" href="editor/codemirror-5.65.1/lib/codemirror.css">
<link rel="stylesheet" type="text/css" href="editor/codemirror-5.65.1/addon/hint/show-hint.css">
<link rel="stylesheet" type="text/css" href="editor/codemirror-5.65.1/addon/display/fullscreen.css">
<link rel="stylesheet" type="text/css" href="editor/finitestatemachine.css">
<link rel="stylesheet" type="text/css" href="editor/extra.css">
<link rel="stylesheet" type="text/css" href="editor/dark.css">
<link rel="stylesheet" type="text/css" href="editor/light.css">
		<script type="text/javascript" src="common.js"></script>
	

	</head>
	<body>
		<table class="banner">
			<tr>
				<td>
					<span><a class="logo link" href="index/default.htm">RACSO</a><a class="link" href="Wc4de018ff0ea.htm">DFA</a><span class="separator"></span><a class="link" href="Wc8ed1eda3435a.htm">CFG</a><span class="separator"></span>Operations:
		  <a class="link" href="Wc3b38f6bb568.htm">Reg</a>,
		  <a class="link" href="Wc222ecb919537.htm">CF</a><span class="separator"></span><a class="link" href="Wc29a1289699c4.htm">PDA</a><span class="separator"></span>Reductions:
		  <a class="link" href="Wcbe7b42ff9194.htm">K</a>,
		  <a class="link" href="Wc7f793506b20.htm">WP</a>,
		  <a class="link" href="Wc8493d9ed5ae.htm">CFG</a>,
		  <a class="link" href="Wc97fc850c238.htm">NP</a>,
		  <a class="link" href="Wc300bea47a1c7.htm">SAT</a><span class="separator"></span>ANTLR:
		  <a class="link" href="Wc26bc632b26e0.htm">lexical</a>,
		  <a class="link" href="Wcee0466f22aa1.htm">syntactic</a><span class="thick-separator"></span><a class="link" href="exam-list/default.htm">Exams</a>

					</span>
				</td>
				<td class="user">
					<a class="link" href="login/default.htm">log in</a>, <a class="link" href="register/default.htm">register</a>, <a class="link" href="guest/default.htm">become guest</a>
					
				</td>
			</tr>
		</table>
		
			<div class="banner cookie">
				This site uses cookies only for the purpose of identifying user sessions.
				This is required to properly register actions.
				<!-- By proceeding, you consent to this. -->
			</div>
		
		
	<div class="exercise">
		<h2 class="exercise-intro">
			
				Exercise
				<a href="Wc821b5605568f.htm" title="Previous exercise" style="text-decoration:none"><sub>‹</sub></a>4<a href="Wc4aba52f086b2.htm" title="Next exercise" style="text-decoration:none"><sub>›</sub></a>:
			
		</h2>
		<div class="exercise-title">Grammar for Pascal expressions</div>
		
			<div class="exercise-description">The set of tokens is {<span class="dltxfy-verbspan">=</span>, <span class="dltxfy-verbspan">&lt;&gt;</span>, <span class="dltxfy-verbspan">&lt;</span>, <span class="dltxfy-verbspan">&gt;</span>, <span class="dltxfy-verbspan">&lt;=</span>,
<span class="dltxfy-verbspan">&gt;=</span>, <span class="dltxfy-verbspan">in</span>, <span class="dltxfy-verbspan">+</span>, <span class="dltxfy-verbspan">-</span>, <span class="dltxfy-verbspan">*</span>, <span class="dltxfy-verbspan">/</span>, <span class="dltxfy-verbspan">div</span>,
<span class="dltxfy-verbspan">mod</span>, <span class="dltxfy-verbspan">not</span>, <span class="dltxfy-verbspan">and</span>, <span class="dltxfy-verbspan">or</span>, <span class="dltxfy-verbspan">[</span>, <span class="dltxfy-verbspan">]</span>, <span class="dltxfy-verbspan">(</span>,
<span class="dltxfy-verbspan">)</span>, <span class="dltxfy-verbspan">.</span>, <span class="dltxfy-verbspan">,</span>, <span class="dltxfy-verbspan">..</span>, <span class="dltxfy-verbspan">^</span>, <span class="dltxfy-verbspan">nil</span>, <span class="dltxfy-verbspan">IDENT</span>,
<span class="dltxfy-verbspan">NATURAL_LIT</span>, <span class="dltxfy-verbspan">REAL_LIT</span>, <span class="dltxfy-verbspan">CHAR_LIT</span>, <span class="dltxfy-verbspan">STRING_LIT</span>}.
Most of the tokens are keywords or special symbols, except for the
uppercase-named ones, whose associated regular languages are:
<ul>
<li> The token <span class="dltxfy-verbspan">IDENT</span> stands for any identifier, which includes
function/procedure identifiers, variable identifiers, record field identifiers,
and so on. An identifier is a non-empty sequence of lowercase alphanumeric
characters and underscore, not starting by a digit. We do not consider
uppercase letters, since Pascal is case-insensitive.
</li><li> The token <span class="dltxfy-verbspan">NATURAL_LIT</span> stands for unsigned integer numeric
literals. Such literals can be represented in decimal (a non-empty set of
decimal digits), in binary (a symbol <span class="dltxfy-verbspan">%</span> followed by a non-empty sequence
of binary digits, i.e., <span class="dltxfy-verbspan">0</span>, <span class="dltxfy-verbspan">1</span>), or hexadecimal (a symbol <span class="dltxfy-verbspan">$</span>
followed by a non-empty sequence of hexadecimal digits, i.e., <span class="dltxfy-verbspan">0</span>,
<span class="dltxfy-verbspan">1</span>, <span class="dltxfy-verbspan">2</span>, <span class="dltxfy-verbspan">3</span>, <span class="dltxfy-verbspan">4</span>, <span class="dltxfy-verbspan">5</span>, <span class="dltxfy-verbspan">6</span>, <span class="dltxfy-verbspan">7</span>, <span class="dltxfy-verbspan">8</span>,
<span class="dltxfy-verbspan">9</span>, <span class="dltxfy-verbspan">a</span>, <span class="dltxfy-verbspan">b</span>, <span class="dltxfy-verbspan">c</span>, <span class="dltxfy-verbspan">d</span>, <span class="dltxfy-verbspan">e</span>, <span class="dltxfy-verbspan">f</span>).
</li><li> The token <span class="dltxfy-verbspan">REAL_LIT</span> refers to real numeric literals. Such literals
either are an integer number (i.e., a non-empty sequence of decimal digits)
followed by an exponent part, or they are a fractional number (i.e., a
non-empty sequence of decimal digits with a dot <span class="dltxfy-verbspan">.</span>, where neither the
integral nor the fractional part is empty) optionally followed by an exponent
part. The exponent starts with <span class="dltxfy-verbspan">e</span>, then there is an optional sign
(<span class="dltxfy-verbspan">+</span>, <span class="dltxfy-verbspan">-</span>), and finally a non-empty sequence of decimal digits.
</li><li> The token <span class="dltxfy-verbspan">CHAR_LIT</span> represents a single character literal. They
are delimited by single quotes (<span class="dltxfy-verbspan">&#39;</span>) or double quotes (<span class="dltxfy-verbspan">&#34;</span>), and
contain a single character in between. To represent the single quote character
it may be done like <span class="dltxfy-verbspan">&#39;&#39;&#39;&#39;</span> (the external single quotes are the delimiters)
or like <span class="dltxfy-verbspan">&#34;&#39;&#34;</span> (the double quotes are the delimiters); and to represent the
double quote charater it may be done like <span class="dltxfy-verbspan">&#39;&#34;&#39;</span> (the single quotes are the
delimiters) or like <span class="dltxfy-verbspan">&#34;&#34;&#34;&#34;</span> (the external double quotes are the
delimiters). Character literals can also be introduced without the delimiting
single/double quotes. In this case, the character is represented with its
numeric codepoint as follows: the number sign (<span class="dltxfy-verbspan">#</span>) followed by a
non-empty sequence of decimal digits.
</li><li> The token <span class="dltxfy-verbspan">STRING_LIT</span> is similar to the <span class="dltxfy-verbspan">CHAR_LIT</span>, except
that no codepoints can be introduced with <span class="dltxfy-verbspan">#</span>, and that between the
delimiters they may be zero or more than one characters instead of exactly
one (as was the case in character literals). As before, when the delimiters are
single quotes, a single quote is represented by the sequence <span class="dltxfy-verbspan">&#39;&#39;</span> (i.e.,
two single quotes), and when the delimiters are double quotes, a double quote
is represented by the sequence <span class="dltxfy-verbspan">&#34;&#34;</span> (i.e., two double quotes).
</li></ul>

<div class="dltxfy-paragraph"><br/></div>The following table shows the list of Pascal operators, sorted by priority
(from highest to lowest):

<div class="dltxfy-paragraph"><br/></div><center>
    <table class="dltxfy-table"><tbody><tr><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-2bbars">
    Category                         </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-2bbars"> Operator                   </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-0rbars dltxfy-cell-0tbars dltxfy-cell-2bbars"> Associativity </td></tr><tr><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars">
    
    
    Unary not                        </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> <span class="dltxfy-verbspan">not</span>                 </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-0rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> Right </td></tr><tr><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars">
    Multiplying operators            </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> <span class="dltxfy-verbspan">* / div mod and</span>     </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-0rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> Left </td></tr><tr><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars">
    Adding operators and unary signs </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> <span class="dltxfy-verbspan">+ - or</span>              </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-0rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> Left (binary <span class="dltxfy-verbspan">+</span>, <span class="dltxfy-verbspan">-</span>, <span class="dltxfy-verbspan">or</span>) and Right (unary <span class="dltxfy-verbspan">+</span>, <span class="dltxfy-verbspan">-</span>) </td></tr><tr><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars">
    Relational operators             </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-1rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> <span class="dltxfy-verbspan"> = &lt;&gt; &lt; &gt; &lt;= &gt;= in </span> </td><td class="dltxfy-cell-calign dltxfy-cell-0lbars dltxfy-cell-0rbars dltxfy-cell-0tbars dltxfy-cell-0bbars"> None </td></tr></tbody></table>
</center>

<div class="dltxfy-paragraph"><br/></div>Note that unary signs (<span class="dltxfy-verbspan">+</span> and <span class="dltxfy-verbspan">-</span>) do not have precedence over other
adding or more prioritary operators. Thus, they cannot appear after any of
them. For instance, &#x201C;<span class="dltxfy-verbspan">not -1</span>&#x201D; and &#x201C;<span class="dltxfy-verbspan">4 + -1</span>&#x201D; are not valid
expression, because the unary sign <span class="dltxfy-verbspan">-</span> appears after some operator. On the
other hand, &#x201C;<span class="dltxfy-verbspan">- not 1</span>&#x201D;, &#x201C;<span class="dltxfy-verbspan">-1 + 4</span>&#x201D; and &#x201C;<span class="dltxfy-verbspan">4 + (-1)</span>&#x201D; are
valid. Moreover, &#x201C;<span class="dltxfy-verbspan">+2 &lt; -1</span>&#x201D; is also valid, since <span class="dltxfy-verbspan">&lt;</span> is a
relational operator, and those have lower precedence.

<div class="dltxfy-paragraph"><br/></div>At the bottom of the operator chain, we have a <em>factor</em>. A factor can be
any of the following things:
<ul>
<li> A variable access. It can be any of the following:
<ul>
<li> A declared variable (i.e., an identifier).
</li><li> A component variable, which denotes a component of an array or record
variable. There are two possibilities:
<ul>
<li> An indexed variable: an array variable followed by a list of one or more
index expressions in brackets. For instance, <span class="dltxfy-verbspan">a[10]</span>, <span class="dltxfy-verbspan">a2[b + c]</span>, or
<span class="dltxfy-verbspan">a3[i, j, 1]</span>. The array variable can be any variable access, whereas the
index expressions can be an arbitrary expression. Note that the last example is
semantically equivalent to <span class="dltxfy-verbspan">a3[i][j][1]</span>.
</li><li> A field designator: a record variable followed by <span class="dltxfy-verbspan">.</span> and a field
specifier. The record variable can be any variable access, whereas the field
specifier is an identifier.
</li></ul>
</li><li> An identified variable, i.e., a variable that is identified by a pointer.
It consists of a variable access followed by <span class="dltxfy-verbspan">^</span>.
</li><li> A buffer variable. It consists of a buffer variable followed by <span class="dltxfy-verbspan">^</span>.
The buffer variable can be any variable access.
</li></ul>
</li><li> A constant: an unsigned number (integer or real), a character string
(character literal or string), a constant identifier or the value <span class="dltxfy-verbspan">nil</span>. A
constant identifier is just the identifier of a constant variable (in other
words, a regular identifier).
</li><li> A function designator. It consists of a function identifier followed,
optionally, by a parameter list. The parameter list is a list of one or more
parameters enclosed in parentheses. Parameters can be any of the following:
expressions, variable accesses, procedure identifiers, or function identifiers.
For instance, <span class="dltxfy-verbspan">cos(t)</span> and <span class="dltxfy-verbspan">max(4, 8)</span> are function designators.
</li><li> A set constructor. It denotes a value of a set type. It consists of a
list of 0 or more member designators enclosed in brackets. Designators brackets
are values or ranges of values. Ranges are denoted by an initial value,
followed by <span class="dltxfy-verbspan">..</span> and a final value. Values are just expressions. For
instance, <span class="dltxfy-verbspan">[red, greend, blue]</span> and <span class="dltxfy-verbspan">[1..9, 15, 20..29]</span> are set
constructors.
</li><li> An arbitrary expression in parentheses.
</li></ul>
Remarks about the AST construction:
<ul>
<li> Relational operators are not associative. This means that &#x201C;<span class="dltxfy-verbspan">x = y = z</span>&#x201D;
is not a valid expression (but &#x201C;<span class="dltxfy-verbspan">(x=y) = z</span>&#x201D; is).
</li><li> An indexed variable must have the token <span class="dltxfy-verbspan">[</span> as root, with the array
variable as first child and a special node named <span class="dltxfy-verbspan">index_list</span> as second
child, with one child per index expression.
</li><li> A field designator must have the token <span class="dltxfy-verbspan">.</span> as root, with the record
variable as first child and the field specifier as second child.
</li><li> An identifier or buffer variable must have the token <span class="dltxfy-verbspan">^</span> as root,
with the corresponding variable as child.
</li><li> A function designator must have the token <span class="dltxfy-verbspan">(</span> as root, with the
fuction identifier as first child and a special node named <span class="dltxfy-verbspan">param_list</span> as
second child, with one child per parameter (even if it doesn&#x2019;t have a parameter
list).
</li><li> A set constructor must have a special node named <span class="dltxfy-verbspan">set_constructor</span>
as root, with one child per member designator. In turn, a member designator
consisting of a range of values, must have the token <span class="dltxfy-verbspan">..</span> as root, with
the initial and final values as children.
</li></ul></div>
			<div class="exercise-details">
				<span class="exercise-detail">Authors:</span> Nil Mamano
				
					/
					<span class="exercise-detail">Documentation:</span> <a href="documentation/antlrsyn.pdf"></a>
				
				
			</div>
			<table>
				<tr>
					<td class="topCell">
						<form method="post" action="Wc4b71889abb84.htm">
							
							<textarea id="codemirror-area" name="submission" wrap="soft" rows="20" cols="80">
// Write your syntactic and lexical descriptions here...</textarea>
							
								To be able to submit you need to either <a class="link" href="login/default.htm">log in</a>, <a class="link" href="register/default.htm">register</a>, or <a class="link" href="guest/default.htm">become a guest</a>.
							
							
							
						</form>
					</td>
					<td class="topCell separatedCell">
						<div class="submission-details">
							
						</div>
					</td>
				</tr>
			</table>
			<script type="text/javascript">
				(function() {
					racsoEditor('codemirror-area', {
						mode: "antlrsyn",
					});
				}());
				
			</script>
			<script type="text/javascript" src="utc-date-rewriter.js"></script>
		
	</div>

		
	</body>
</html>